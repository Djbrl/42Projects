
; Fichiers de rendu Makefile, *.h, *.c, quelques cartes

; Makefile NAME, all, clean, fclean, re

; Arguments Une carte au format *.ber

; • open, close, read, write,
; malloc, free, perror,
; strerror, exit

; • Toutes les fonctions de la
; bibliothèque mathématique
; (option de compilation -lm,
; man man 3 math)

; IV.1 Le jeu
; • Le but du joueur est de collecter tous les items présents sur la carte, puis de
; s’échapper en empruntant le chemin le plus court possible.

; • Les touches W, A, S et D doivent être utilisées afin de mouvoir le personnage prin-
; cipal.
; • Le joueur doit être capable de se déplacer dans ces 4 directions : haut, bas,
; gauche, droite.
; • Le joueur ne doit pas pouvoir se déplacer dans les murs.

; • À chaque mouvement, le compte total de mouvement doit être affiché dans le
; shell.

; • Vous devez utiliser une vue 2D (vue de haut ou de profil).
; • Le jeu n’a pas à être en temps réel.
; • Bien que les exemples donnés montrent un thème dauphin, vous êtes libre de créer
; l’univers que vous voulez.


; IV.2 Gestion graphique

; • Votre programme doit afficher une image dans une fenêtre.

; • La gestion de la fenêtre doit rester fluide (changer de fenêtre, la réduire, etc.).

; • Appuyer sur la touche ESC doit fermer la fenêtre et quitter le programme propre-
; ment.
; • Cliquer sur la croix en haut de la fenêtre doit fermer celle-ci et quitter le programme
; proprement.

; • Utiliser les images de la MiniLibX est obligatoire.


; IV.3 La carte
; • La carte sera construite en utilisant 3 éléments : les murs, les items à collecter,
; et l’espace vide.
; • Votre carte peut être composée de ces 5 caractères :

; 0 pour un emplacement vide,
; 1 pour un mur,
; C pour un item à collecter (C pour collectible),
; E pour une sortie (E pour exit),
; P pour la position de départ du personnage.

; Exemple de carte basique :
; 1111111111111
; 10010000000C1
; 1000011111001
; 1P0011E000001
; 1111111111111

; • La carte doit contenir au moins 1 sortie, 1 item et 1 position de départ.

; • La carte doit être de forme rectangulaire.

; • La carte doit être fermée en étant encadrée par des murs. Si ce n’est pas le cas, le
; programme retourne une erreur.

; • Vous devez pouvoir parser tout type de carte du moment qu’elle respecte les règles
; énoncées ci-dessus.

; • Un autre exemple de carte .ber basique :
; 1111111111111111111111111111111111
; 1E0000000000000C00000C000000000001
; 1010010100100000101001000000010101
; 1010010010101010001001000000010101
; 1P0000000C00C0000000000000000000C1
; 1111111111111111111111111111111111

; • Si une erreur de configuration est détectée, le programme doit quitter proprement
; et retourner "Error\n" suivi d’un message d’erreur explicite